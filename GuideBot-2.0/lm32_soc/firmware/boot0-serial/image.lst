
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000380  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000bc  00860380  00860380  000003d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  0086043c  0086043c  00000490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  00860448  00860448  0000049c  2**2
                  ALLOC
  4 .debug_abbrev 00000234  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000477  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000031e  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a6  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000d7  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000083  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000001bd  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  0000135d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 04 50 	ori gp,gp,0x450
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 04 48 	ori r1,r1,0x448
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 04 4c 	ori r3,r3,0x44c

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 0c 	calli 86008c <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <main>:
#include <string.h>
#include <stdlib.h>



int main(int argc, char **argv){ ////Main Fuction
  86008c:	37 9c ff bc 	addi sp,sp,-68
  860090:	5b 8b 00 44 	sw (sp+68),r11
  860094:	5b 8c 00 40 	sw (sp+64),r12
  860098:	5b 8d 00 3c 	sw (sp+60),r13
  86009c:	5b 8e 00 38 	sw (sp+56),r14
  8600a0:	5b 8f 00 34 	sw (sp+52),r15
  8600a4:	5b 90 00 30 	sw (sp+48),r16
  8600a8:	5b 91 00 2c 	sw (sp+44),r17
  8600ac:	5b 92 00 28 	sw (sp+40),r18
  8600b0:	5b 93 00 24 	sw (sp+36),r19
  8600b4:	5b 94 00 20 	sw (sp+32),r20
  8600b8:	5b 95 00 1c 	sw (sp+28),r21
  8600bc:	5b 96 00 18 	sw (sp+24),r22
  8600c0:	5b 97 00 14 	sw (sp+20),r23
  8600c4:	5b 98 00 10 	sw (sp+16),r24
  8600c8:	5b 99 00 0c 	sw (sp+12),r25
  8600cc:	5b 9b 00 08 	sw (sp+8),fp
  8600d0:	5b 9d 00 04 	sw (sp+4),ra
  8600d4:	78 10 00 86 	mvhi r16,0x86
  8600d8:	78 0f 00 86 	mvhi r15,0x86
  8600dc:	78 0d 00 86 	mvhi r13,0x86
  8600e0:	78 0e 00 86 	mvhi r14,0x86
  8600e4:	78 0b 00 86 	mvhi r11,0x86

    			
			break;
			
		case 's': // multi
			uart_putstr("Parar\r\n");
  8600e8:	78 16 00 86 	mvhi r22,0x86
			gpio_write(0x00); // (0000|0000)
			uart_putstr("Escribi\r\n");
  8600ec:	78 11 00 86 	mvhi r17,0x86
		switch (c) {
		
		
		
    		case 'w':  //Suma
    			uart_putstr("Adelante\r\n");
  8600f0:	78 15 00 86 	mvhi r21,0x86
			
			break;  

		case 'a': // resta
			
			uart_putstr("Izquierda\r\n");
  8600f4:	78 14 00 86 	mvhi r20,0x86
    		gpio_write(GPIO_INITIAL);
			break;
    			
    		case 'd': // div
			
			uart_putstr("Derecha\r\n");
  8600f8:	78 13 00 86 	mvhi r19,0x86
  8600fc:	3a 10 03 80 	ori r16,r16,0x380
  860100:	39 ef 03 8c 	ori r15,r15,0x38c
  860104:	39 ad 03 d4 	ori r13,r13,0x3d4
  860108:	39 ce 03 d8 	ori r14,r14,0x3d8
  86010c:	39 6b 04 44 	ori r11,r11,0x444
		c = uart_getchar();
		uart_putstr("\r\n");
		uart_putstr("Letra Prueba: ");
		uart_putchar(c);
		uart_putstr("\r\n");
	        gpio0->w_dir = 0xff;
  860110:	34 17 00 ff 	mvi r23,255
		
		switch (c) {
  860114:	34 12 00 64 	mvi r18,100
  860118:	34 19 00 73 	mvi r25,115

    			
			break;
			
		case 's': // multi
			uart_putstr("Parar\r\n");
  86011c:	3a d6 04 00 	ori r22,r22,0x400
			gpio_write(0x00); // (0000|0000)
			uart_putstr("Escribi\r\n");
  860120:	3a 31 03 f4 	ori r17,r17,0x3f4
		uart_putstr("Letra Prueba: ");
		uart_putchar(c);
		uart_putstr("\r\n");
	        gpio0->w_dir = 0xff;
		
		switch (c) {
  860124:	34 1b 00 77 	mvi fp,119
		
		
		
    		case 'w':  //Suma
    			uart_putstr("Adelante\r\n");
  860128:	3a b5 03 e8 	ori r21,r21,0x3e8
		uart_putstr("Letra Prueba: ");
		uart_putchar(c);
		uart_putstr("\r\n");
	        gpio0->w_dir = 0xff;
		
		switch (c) {
  86012c:	34 18 00 61 	mvi r24,97
			
			break;  

		case 'a': // resta
			
			uart_putstr("Izquierda\r\n");
  860130:	3a 94 04 14 	ori r20,r20,0x414
    		gpio_write(GPIO_INITIAL);
			break;
    			
    		case 'd': // div
			
			uart_putstr("Derecha\r\n");
  860134:	3a 73 04 08 	ori r19,r19,0x408
	//uint8_t o2;
	
	
	
	for(;;){
	uart_putstr("Empezamos\r\n");
  860138:	ba 00 08 00 	mv r1,r16
  86013c:	f8 00 00 72 	calli 860304 <uart_putstr>
	uart_putstr(" Ingresa w para adelante, s para parar, d para derecha, a para izquierda\r\n");
  860140:	b9 e0 08 00 	mv r1,r15
  860144:	f8 00 00 70 	calli 860304 <uart_putstr>
	
		c = uart_getchar();
  860148:	f8 00 00 5d 	calli 8602bc <uart_getchar>
  86014c:	b8 20 60 00 	mv r12,r1
		uart_putstr("\r\n");
  860150:	b9 a0 08 00 	mv r1,r13
  860154:	f8 00 00 6c 	calli 860304 <uart_putstr>
		uart_putstr("Letra Prueba: ");
  860158:	b9 c0 08 00 	mv r1,r14
  86015c:	f8 00 00 6a 	calli 860304 <uart_putstr>
		uart_putchar(c);
  860160:	b9 80 08 00 	mv r1,r12
  860164:	f8 00 00 5f 	calli 8602e0 <uart_putchar>
		uart_putstr("\r\n");
  860168:	b9 a0 08 00 	mv r1,r13
  86016c:	f8 00 00 66 	calli 860304 <uart_putstr>
	        gpio0->w_dir = 0xff;
  860170:	29 61 00 00 	lw r1,(r11+0)
  860174:	58 37 00 08 	sw (r1+8),r23
		
		switch (c) {
  860178:	45 92 00 2e 	be r12,r18,860230 <main+0x1a4>
  86017c:	55 92 00 19 	bgu r12,r18,8601e0 <main+0x154>
  860180:	45 98 00 30 	be r12,r24,860240 <main+0x1b4>
			sleep(3000);          
    		gpio_write(GPIO_INITIAL);
			break;  

		default:
			uart_putstr("Programa terminado!! \r\n");
  860184:	78 01 00 86 	mvhi r1,0x86
  860188:	38 21 04 20 	ori r1,r1,0x420
  86018c:	f8 00 00 5e 	calli 860304 <uart_putstr>
		
		
	}
	
	return 0;
}
  860190:	34 01 00 00 	mvi r1,0
  860194:	2b 9d 00 04 	lw ra,(sp+4)
  860198:	2b 8b 00 44 	lw r11,(sp+68)
  86019c:	2b 8c 00 40 	lw r12,(sp+64)
  8601a0:	2b 8d 00 3c 	lw r13,(sp+60)
  8601a4:	2b 8e 00 38 	lw r14,(sp+56)
  8601a8:	2b 8f 00 34 	lw r15,(sp+52)
  8601ac:	2b 90 00 30 	lw r16,(sp+48)
  8601b0:	2b 91 00 2c 	lw r17,(sp+44)
  8601b4:	2b 92 00 28 	lw r18,(sp+40)
  8601b8:	2b 93 00 24 	lw r19,(sp+36)
  8601bc:	2b 94 00 20 	lw r20,(sp+32)
  8601c0:	2b 95 00 1c 	lw r21,(sp+28)
  8601c4:	2b 96 00 18 	lw r22,(sp+24)
  8601c8:	2b 97 00 14 	lw r23,(sp+20)
  8601cc:	2b 98 00 10 	lw r24,(sp+16)
  8601d0:	2b 99 00 0c 	lw r25,(sp+12)
  8601d4:	2b 9b 00 08 	lw fp,(sp+8)
  8601d8:	37 9c 00 44 	addi sp,sp,68
  8601dc:	c3 a0 00 00 	ret
		uart_putstr("Letra Prueba: ");
		uart_putchar(c);
		uart_putstr("\r\n");
	        gpio0->w_dir = 0xff;
		
		switch (c) {
  8601e0:	45 99 00 10 	be r12,r25,860220 <main+0x194>
  8601e4:	5d 9b ff e8 	bne r12,fp,860184 <main+0xf8>
		
		
		
    		case 'w':  //Suma
    			uart_putstr("Adelante\r\n");
  8601e8:	ba a0 08 00 	mv r1,r21
  8601ec:	f8 00 00 46 	calli 860304 <uart_putstr>
    			gpio_write(0x05); // (0000|0101)
  8601f0:	34 01 00 05 	mvi r1,5
			break;  

		case 'a': // resta
			
			uart_putstr("Izquierda\r\n");
			gpio_write(0x50); // (0000|0100)
  8601f4:	f8 00 00 57 	calli 860350 <gpio_write>
			uart_putstr("Escribi\r\n");
  8601f8:	ba 20 08 00 	mv r1,r17
  8601fc:	f8 00 00 42 	calli 860304 <uart_putstr>
			uart_putstr((char *)gpio0->write);
  860200:	29 61 00 00 	lw r1,(r11+0)
  860204:	28 21 00 04 	lw r1,(r1+4)
  860208:	f8 00 00 3f 	calli 860304 <uart_putstr>
			sleep(3000);          
  86020c:	34 01 0b b8 	mvi r1,3000
  860210:	f8 00 00 10 	calli 860250 <sleep>
    		gpio_write(GPIO_INITIAL);
  860214:	34 01 00 00 	mvi r1,0
  860218:	f8 00 00 4e 	calli 860350 <gpio_write>
  86021c:	e3 ff ff c7 	bi 860138 <main+0xac>

    			
			break;
			
		case 's': // multi
			uart_putstr("Parar\r\n");
  860220:	ba c0 08 00 	mv r1,r22
  860224:	f8 00 00 38 	calli 860304 <uart_putstr>
			gpio_write(0x00); // (0000|0000)
  860228:	34 01 00 00 	mvi r1,0
  86022c:	e3 ff ff f2 	bi 8601f4 <main+0x168>
    		gpio_write(GPIO_INITIAL);
			break;
    			
    		case 'd': // div
			
			uart_putstr("Derecha\r\n");
  860230:	ba 60 08 00 	mv r1,r19
  860234:	f8 00 00 34 	calli 860304 <uart_putstr>
			gpio_write(0x01); // (0000|0001)
  860238:	34 01 00 01 	mvi r1,1
  86023c:	e3 ff ff ee 	bi 8601f4 <main+0x168>
			
			break;  

		case 'a': // resta
			
			uart_putstr("Izquierda\r\n");
  860240:	ba 80 08 00 	mv r1,r20
  860244:	f8 00 00 30 	calli 860304 <uart_putstr>
			gpio_write(0x50); // (0000|0100)
  860248:	34 01 00 50 	mvi r1,80
  86024c:	e3 ff ff ea 	bi 8601f4 <main+0x168>

00860250 <sleep>:
 */
void sleep(int msec){
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  860250:	78 04 00 86 	mvhi r4,0x86
  860254:	38 84 04 38 	ori r4,r4,0x438
  860258:	28 83 00 00 	lw r3,(r4+0)
  86025c:	78 02 00 86 	mvhi r2,0x86
  860260:	38 42 04 40 	ori r2,r2,0x440
  860264:	28 42 00 00 	lw r2,(r2+0)
  860268:	88 23 08 00 	mul r1,r1,r3
  86026c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860270:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
  860274:	34 01 00 0a 	mvi r1,10
  860278:	58 41 00 0c 	sw (r2+12),r1
	//uart_putstr("Hola, estoy en el timer");
	//uart_putstr(compare1);
	do {
		//halt();
 		tcr = timer0->tcr1;
  86027c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860280:	20 21 00 01 	andi r1,r1,0x1
  860284:	44 20 ff fe 	be r1,r0,86027c <sleep+0x2c>
}
  860288:	c3 a0 00 00 	ret

0086028c <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
  86028c:	78 01 00 86 	mvhi r1,0x86
  860290:	78 03 00 86 	mvhi r3,0x86
  860294:	38 21 04 40 	ori r1,r1,0x440
  860298:	38 63 04 38 	ori r3,r3,0x438
  86029c:	28 21 00 00 	lw r1,(r1+0)
  8602a0:	28 62 00 00 	lw r2,(r3+0)
  8602a4:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
  8602a8:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
  8602ac:	34 02 00 0e 	mvi r2,14
  8602b0:	58 22 00 00 	sw (r1+0),r2
}
  8602b4:	c3 a0 00 00 	ret

008602b8 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  8602b8:	c3 a0 00 00 	ret

008602bc <uart_getchar>:

char uart_getchar()
{   
  8602bc:	78 01 00 86 	mvhi r1,0x86
  8602c0:	38 21 04 3c 	ori r1,r1,0x43c
  8602c4:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  8602c8:	28 41 00 00 	lw r1,(r2+0)
  8602cc:	20 21 00 01 	andi r1,r1,0x1
  8602d0:	44 20 ff fe 	be r1,r0,8602c8 <uart_getchar+0xc>
	return uart0->rxtx;
  8602d4:	28 41 00 04 	lw r1,(r2+4)
}
  8602d8:	20 21 00 ff 	andi r1,r1,0xff
  8602dc:	c3 a0 00 00 	ret

008602e0 <uart_putchar>:

void uart_putchar(char c)
{
  8602e0:	78 02 00 86 	mvhi r2,0x86
  8602e4:	38 42 04 3c 	ori r2,r2,0x43c
  8602e8:	28 43 00 00 	lw r3,(r2+0)
  8602ec:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  8602f0:	28 62 00 00 	lw r2,(r3+0)
  8602f4:	20 42 00 10 	andi r2,r2,0x10
  8602f8:	5c 40 ff fe 	bne r2,r0,8602f0 <uart_putchar+0x10>
	uart0->rxtx = c;
  8602fc:	58 61 00 04 	sw (r3+4),r1
}
  860300:	c3 a0 00 00 	ret

00860304 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860304:	40 24 00 00 	lbu r4,(r1+0)
  860308:	44 80 00 0b 	be r4,r0,860334 <uart_putstr+0x30>
  86030c:	78 02 00 86 	mvhi r2,0x86
  860310:	38 42 04 3c 	ori r2,r2,0x43c
  860314:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  860318:	28 62 00 00 	lw r2,(r3+0)
  86031c:	20 42 00 10 	andi r2,r2,0x10
  860320:	5c 40 ff fe 	bne r2,r0,860318 <uart_putstr+0x14>
	uart0->rxtx = c;
  860324:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  860328:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  86032c:	40 24 00 00 	lbu r4,(r1+0)
  860330:	5c 82 ff fa 	bne r4,r2,860318 <uart_putstr+0x14>
  860334:	c3 a0 00 00 	ret

00860338 <gpio_read>:
 * GPIO Functions
 */
 
uint8_t gpio_read(){ // Read a 8 bit "order" from the outside

	return (uint8_t)gpio0->read; //Para el proyecto no sirve... jaja
  860338:	78 01 00 86 	mvhi r1,0x86
  86033c:	38 21 04 44 	ori r1,r1,0x444
  860340:	28 21 00 00 	lw r1,(r1+0)
  860344:	28 21 00 00 	lw r1,(r1+0)
	
}
  860348:	20 21 00 ff 	andi r1,r1,0xff
  86034c:	c3 a0 00 00 	ret

00860350 <gpio_write>:
void gpio_write(uint8_t dataout){// , uint8_t whichdir){ // Write a 8 bit order to the outside 
	gpio0->write = (uint32_t)dataout; //Le mando la información a dichos pines
  860350:	78 02 00 86 	mvhi r2,0x86
  860354:	38 42 04 44 	ori r2,r2,0x444
  860358:	28 42 00 00 	lw r2,(r2+0)
uint8_t gpio_read(){ // Read a 8 bit "order" from the outside

	return (uint8_t)gpio0->read; //Para el proyecto no sirve... jaja
	
}
void gpio_write(uint8_t dataout){// , uint8_t whichdir){ // Write a 8 bit order to the outside 
  86035c:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->write = (uint32_t)dataout; //Le mando la información a dichos pines
  860360:	58 41 00 04 	sw (r2+4),r1

}
  860364:	c3 a0 00 00 	ret

00860368 <gpio_wdir>:
void gpio_wdir(uint8_t dirout){

	gpio0->w_dir = (uint32_t)dirout; // Desconecto los pines w_dir[i] = 0
  860368:	78 02 00 86 	mvhi r2,0x86
  86036c:	38 42 04 44 	ori r2,r2,0x444
  860370:	28 42 00 00 	lw r2,(r2+0)
}
void gpio_write(uint8_t dataout){// , uint8_t whichdir){ // Write a 8 bit order to the outside 
	gpio0->write = (uint32_t)dataout; //Le mando la información a dichos pines

}
void gpio_wdir(uint8_t dirout){
  860374:	20 21 00 ff 	andi r1,r1,0xff

	gpio0->w_dir = (uint32_t)dirout; // Desconecto los pines w_dir[i] = 0
  860378:	58 41 00 08 	sw (r2+8),r1

}
  86037c:	c3 a0 00 00 	ret
