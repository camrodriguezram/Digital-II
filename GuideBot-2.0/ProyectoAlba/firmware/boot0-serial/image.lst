
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000488  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000020  00000488  00000488  000004dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  000004a8  000004a8  000004fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_abbrev 0000026b  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000677  00000000  00000000  00000783  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004b6  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000e0  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000122  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000010f  00000000  00000000  000014b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 0000008e  00000000  00000000  000015c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000197  00000000  00000000  000016a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 04 d0 	ori gp,gp,0x4d0
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 04 c4 	ori r1,r1,0x4c4
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 04 c4 	ori r3,r3,0x4c4

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 94 	calli 2ac <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <lcd_cmd>:
	lcd_cmd(0x06); // Automatic Increment - No Display shift.
	lcd_cmd(0x80); // Address DDRAM with 0 offset 80h.
 }

void lcd_cmd (char cmd)
{
  8c:	37 9c ff fc 	addi sp,sp,-4
  90:	5b 9d 00 04 	sw (sp+4),ra
	gpio0->out = ((cmd >> 4) & 0x0F)|LCD_EN;
  94:	78 03 00 00 	mvhi r3,0x0
  98:	38 63 04 bc 	ori r3,r3,0x4bc
  9c:	78 02 00 00 	mvhi r2,0x0
  a0:	28 63 00 00 	lw r3,(r3+0)
	lcd_cmd(0x06); // Automatic Increment - No Display shift.
	lcd_cmd(0x80); // Address DDRAM with 0 offset 80h.
 }

void lcd_cmd (char cmd)
{
  a4:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->out = ((cmd >> 4) & 0x0F)|LCD_EN;
  a8:	38 42 04 b0 	ori r2,r2,0x4b0
  ac:	28 42 00 00 	lw r2,(r2+0)
  b0:	00 24 00 04 	srui r4,r1,4
	gpio0->out = ((cmd >> 4) & 0x0F);
	 
	gpio0->out = (cmd & 0x0F)|LCD_EN;
  b4:	20 21 00 0f 	andi r1,r1,0xf
	lcd_cmd(0x80); // Address DDRAM with 0 offset 80h.
 }

void lcd_cmd (char cmd)
{
	gpio0->out = ((cmd >> 4) & 0x0F)|LCD_EN;
  b8:	b8 83 28 00 	or r5,r4,r3
  bc:	58 45 00 14 	sw (r2+20),r5
	gpio0->out = ((cmd >> 4) & 0x0F);
  c0:	58 44 00 14 	sw (r2+20),r4
	 
	gpio0->out = (cmd & 0x0F)|LCD_EN;
  c4:	b8 23 18 00 	or r3,r1,r3
  c8:	58 43 00 14 	sw (r2+20),r3
	gpio0->out = (cmd & 0x0F);
  cc:	58 41 00 14 	sw (r2+20),r1
	 
	sleep(200);
  d0:	34 01 00 c8 	mvi r1,200
  d4:	f8 00 00 b7 	calli 3b0 <sleep>
	sleep(200);
  d8:	34 01 00 c8 	mvi r1,200
  dc:	f8 00 00 b5 	calli 3b0 <sleep>
}
  e0:	2b 9d 00 04 	lw ra,(sp+4)
  e4:	37 9c 00 04 	addi sp,sp,4
  e8:	c3 a0 00 00 	ret

000000ec <lcd_reset>:

	int LCD_EN=0x80;
        int LCD_RS=0x20;

void lcd_reset()
{
  ec:	37 9c ff f0 	addi sp,sp,-16
  f0:	5b 8b 00 10 	sw (sp+16),r11
  f4:	5b 8c 00 0c 	sw (sp+12),r12
  f8:	5b 8d 00 08 	sw (sp+8),r13
  fc:	5b 9d 00 04 	sw (sp+4),ra

	gpio0->out = 0xFF;
 100:	78 0b 00 00 	mvhi r11,0x0
 104:	39 6b 04 b0 	ori r11,r11,0x4b0
 108:	29 62 00 00 	lw r2,(r11+0)
 10c:	34 01 00 ff 	mvi r1,255
	sleep(20);
	gpio0->out = 0x03+LCD_EN;
 110:	78 0c 00 00 	mvhi r12,0x0
        int LCD_RS=0x20;

void lcd_reset()
{

	gpio0->out = 0xFF;
 114:	58 41 00 14 	sw (r2+20),r1
	sleep(20);
 118:	34 01 00 14 	mvi r1,20
 11c:	f8 00 00 a5 	calli 3b0 <sleep>
	gpio0->out = 0x03+LCD_EN;
 120:	39 8c 04 bc 	ori r12,r12,0x4bc
 124:	29 82 00 00 	lw r2,(r12+0)
 128:	29 61 00 00 	lw r1,(r11+0)
	gpio0->out = 0x03;
 12c:	34 0d 00 03 	mvi r13,3
void lcd_reset()
{

	gpio0->out = 0xFF;
	sleep(20);
	gpio0->out = 0x03+LCD_EN;
 130:	34 42 00 03 	addi r2,r2,3
 134:	58 22 00 14 	sw (r1+20),r2
	gpio0->out = 0x03;
 138:	58 2d 00 14 	sw (r1+20),r13
	sleep(10);
 13c:	34 01 00 0a 	mvi r1,10
 140:	f8 00 00 9c 	calli 3b0 <sleep>
	gpio0->out = 0x03+LCD_EN;
 144:	29 83 00 00 	lw r3,(r12+0)
 148:	29 62 00 00 	lw r2,(r11+0)
	gpio0->out = 0x03;
	sleep(1);
 14c:	34 01 00 01 	mvi r1,1
	gpio0->out = 0xFF;
	sleep(20);
	gpio0->out = 0x03+LCD_EN;
	gpio0->out = 0x03;
	sleep(10);
	gpio0->out = 0x03+LCD_EN;
 150:	34 63 00 03 	addi r3,r3,3
 154:	58 43 00 14 	sw (r2+20),r3
	gpio0->out = 0x03;
 158:	58 4d 00 14 	sw (r2+20),r13
	sleep(1);
 15c:	f8 00 00 95 	calli 3b0 <sleep>
	gpio0->out = 0x03+LCD_EN;
 160:	29 83 00 00 	lw r3,(r12+0)
 164:	29 62 00 00 	lw r2,(r11+0)
	gpio0->out = 0x03;
	sleep(1);
 168:	34 01 00 01 	mvi r1,1
	gpio0->out = 0x03;
	sleep(10);
	gpio0->out = 0x03+LCD_EN;
	gpio0->out = 0x03;
	sleep(1);
	gpio0->out = 0x03+LCD_EN;
 16c:	34 63 00 03 	addi r3,r3,3
 170:	58 43 00 14 	sw (r2+20),r3
	gpio0->out = 0x03;
 174:	58 4d 00 14 	sw (r2+20),r13
	sleep(1);
 178:	f8 00 00 8e 	calli 3b0 <sleep>
	gpio0->out = 0x02+LCD_EN;
 17c:	29 82 00 00 	lw r2,(r12+0)
 180:	29 61 00 00 	lw r1,(r11+0)
 184:	34 42 00 02 	addi r2,r2,2
 188:	58 22 00 14 	sw (r1+20),r2
	gpio0->out = 0x02;
 18c:	34 02 00 02 	mvi r2,2
 190:	58 22 00 14 	sw (r1+20),r2
	sleep(1);
 194:	34 01 00 01 	mvi r1,1
 198:	f8 00 00 86 	calli 3b0 <sleep>
}
 19c:	2b 9d 00 04 	lw ra,(sp+4)
 1a0:	2b 8b 00 10 	lw r11,(sp+16)
 1a4:	2b 8c 00 0c 	lw r12,(sp+12)
 1a8:	2b 8d 00 08 	lw r13,(sp+8)
 1ac:	37 9c 00 10 	addi sp,sp,16
 1b0:	c3 a0 00 00 	ret

000001b4 <lcd_init>:
 
void lcd_init ()
{
 1b4:	37 9c ff f8 	addi sp,sp,-8
 1b8:	5b 8b 00 08 	sw (sp+8),r11
 1bc:	5b 9d 00 04 	sw (sp+4),ra
	lcd_reset(); // Call LCD reset
	lcd_cmd(0x28); // 4-bit mode - 2 line - 5x7 font.
 1c0:	78 0b 00 00 	mvhi r11,0x0
	sleep(1);
}
 
void lcd_init ()
{
	lcd_reset(); // Call LCD reset
 1c4:	fb ff ff ca 	calli ec <lcd_reset>
	lcd_cmd(0x28); // 4-bit mode - 2 line - 5x7 font.
 1c8:	39 6b 00 8c 	ori r11,r11,0x8c
 1cc:	34 01 00 28 	mvi r1,40
 1d0:	d9 60 00 00 	call r11
	lcd_cmd(0x0C); // Display no cursor - no blink.
 1d4:	34 01 00 0c 	mvi r1,12
 1d8:	d9 60 00 00 	call r11
	lcd_cmd(0x06); // Automatic Increment - No Display shift.
 1dc:	34 01 00 06 	mvi r1,6
 1e0:	d9 60 00 00 	call r11
	lcd_cmd(0x80); // Address DDRAM with 0 offset 80h.
 1e4:	34 01 00 80 	mvi r1,128
 1e8:	d9 60 00 00 	call r11
 }
 1ec:	2b 9d 00 04 	lw ra,(sp+4)
 1f0:	2b 8b 00 08 	lw r11,(sp+8)
 1f4:	37 9c 00 08 	addi sp,sp,8
 1f8:	c3 a0 00 00 	ret

000001fc <lcd_data>:
	sleep(200);
	sleep(200);
}
 
void lcd_data (unsigned char dat)
{
 1fc:	37 9c ff fc 	addi sp,sp,-4
 200:	5b 9d 00 04 	sw (sp+4),ra
	gpio0->out = (((dat >> 4) & 0x0F)|LCD_EN|LCD_RS);
 204:	78 03 00 00 	mvhi r3,0x0
 208:	78 02 00 00 	mvhi r2,0x0
 20c:	38 42 04 bc 	ori r2,r2,0x4bc
 210:	38 63 04 c0 	ori r3,r3,0x4c0
 214:	28 63 00 00 	lw r3,(r3+0)
 218:	28 44 00 00 	lw r4,(r2+0)
 21c:	78 02 00 00 	mvhi r2,0x0
	sleep(200);
	sleep(200);
}
 
void lcd_data (unsigned char dat)
{
 220:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->out = (((dat >> 4) & 0x0F)|LCD_EN|LCD_RS);
 224:	38 42 04 b0 	ori r2,r2,0x4b0
 228:	28 42 00 00 	lw r2,(r2+0)
 22c:	00 25 00 04 	srui r5,r1,4
 230:	b8 64 20 00 	or r4,r3,r4
 234:	b8 a4 30 00 	or r6,r5,r4
 238:	58 46 00 14 	sw (r2+20),r6
	gpio0->out = (((dat >> 4) & 0x0F)|LCD_RS);
 23c:	b8 a3 28 00 	or r5,r5,r3
	gpio0->out = ((dat & 0x0F)|LCD_EN|LCD_RS);
 240:	20 21 00 0f 	andi r1,r1,0xf
}
 
void lcd_data (unsigned char dat)
{
	gpio0->out = (((dat >> 4) & 0x0F)|LCD_EN|LCD_RS);
	gpio0->out = (((dat >> 4) & 0x0F)|LCD_RS);
 244:	58 45 00 14 	sw (r2+20),r5
	gpio0->out = ((dat & 0x0F)|LCD_EN|LCD_RS);
 248:	b8 24 20 00 	or r4,r1,r4
 24c:	58 44 00 14 	sw (r2+20),r4
	gpio0->out = ((dat & 0x0F)|LCD_RS);
 250:	b8 23 08 00 	or r1,r1,r3
 254:	58 41 00 14 	sw (r2+20),r1
	 
	sleep(200);
 258:	34 01 00 c8 	mvi r1,200
 25c:	f8 00 00 55 	calli 3b0 <sleep>
	sleep(200);
 260:	34 01 00 c8 	mvi r1,200
 264:	f8 00 00 53 	calli 3b0 <sleep>
}
 268:	2b 9d 00 04 	lw ra,(sp+4)
 26c:	37 9c 00 04 	addi sp,sp,4
 270:	c3 a0 00 00 	ret

00000274 <lcd_puts>:

void lcd_puts(char *str)
{
 274:	37 9c ff f8 	addi sp,sp,-8
 278:	5b 8b 00 08 	sw (sp+8),r11
 27c:	5b 9d 00 04 	sw (sp+4),ra
 280:	b8 20 58 00 	mv r11,r1
                unsigned int i=0;
                for(;str[i]!=0;i++)
 284:	40 21 00 00 	lbu r1,(r1+0)
 288:	44 20 00 05 	be r1,r0,29c <lcd_puts+0x28>
                                lcd_data(str[i]);
 28c:	fb ff ff dc 	calli 1fc <lcd_data>
}

void lcd_puts(char *str)
{
                unsigned int i=0;
                for(;str[i]!=0;i++)
 290:	41 61 00 01 	lbu r1,(r11+1)
 294:	35 6b 00 01 	addi r11,r11,1
 298:	5c 20 ff fd 	bne r1,r0,28c <lcd_puts+0x18>
                                lcd_data(str[i]);
}
 29c:	2b 9d 00 04 	lw ra,(sp+4)
 2a0:	2b 8b 00 08 	lw r11,(sp+8)
 2a4:	37 9c 00 08 	addi sp,sp,8
 2a8:	c3 a0 00 00 	ret

000002ac <main>:

int main (int argc, char **argv)
{
 2ac:	37 9c ff e8 	addi sp,sp,-24
 2b0:	5b 8b 00 18 	sw (sp+24),r11
 2b4:	5b 8c 00 14 	sw (sp+20),r12
 2b8:	5b 8d 00 10 	sw (sp+16),r13
 2bc:	5b 8e 00 0c 	sw (sp+12),r14
 2c0:	5b 8f 00 08 	sw (sp+8),r15
 2c4:	5b 9d 00 04 	sw (sp+4),ra
	int a=0;
	a=puls0->in;	
 2c8:	78 0e 00 00 	mvhi r14,0x0
 2cc:	39 ce 04 b8 	ori r14,r14,0x4b8
 2d0:	29 c1 00 00 	lw r1,(r14+0)
 	lcd_init();
	lcd_cmd(0X80);      // Start Cursor From First Line
        lcd_puts("Cuanta cantidad?");  //Print HELLO on LCD
        lcd_cmd(0XC0);         // Start Cursor From Second Line
        lcd_puts("a100 b200"); //Print HELLO on LCD
 2d4:	78 0b 00 00 	mvhi r11,0x0
 2d8:	39 6b 04 b4 	ori r11,r11,0x4b4
}

int main (int argc, char **argv)
{
	int a=0;
	a=puls0->in;	
 2dc:	28 21 00 00 	lw r1,(r1+0)
        lcd_puts("a100 b200"); //Print HELLO on LCD

while(1)
{
	a=puls0->in;
	if (a==1)
 2e0:	34 0d 00 01 	mvi r13,1

int main (int argc, char **argv)
{
	int a=0;
	a=puls0->in;	
 	lcd_init();
 2e4:	fb ff ff b4 	calli 1b4 <lcd_init>
	lcd_cmd(0X80);      // Start Cursor From First Line
 2e8:	34 01 00 80 	mvi r1,128
 2ec:	fb ff ff 68 	calli 8c <lcd_cmd>
        lcd_puts("Cuanta cantidad?");  //Print HELLO on LCD
 2f0:	78 01 00 00 	mvhi r1,0x0
 2f4:	38 21 04 88 	ori r1,r1,0x488
 2f8:	fb ff ff df 	calli 274 <lcd_puts>
        lcd_cmd(0XC0);         // Start Cursor From Second Line
 2fc:	34 01 00 c0 	mvi r1,192
 300:	fb ff ff 63 	calli 8c <lcd_cmd>
        lcd_puts("a100 b200"); //Print HELLO on LCD
 304:	78 01 00 00 	mvhi r1,0x0
 308:	38 21 04 9c 	ori r1,r1,0x49c
 30c:	fb ff ff da 	calli 274 <lcd_puts>
 310:	29 62 00 00 	lw r2,(r11+0)
                blink0->out=0x00000002;
		sleep(1100);
		blink0->out=0x00000000;
	a=0;
	}
	if (a==2)
 314:	34 0c 00 02 	mvi r12,2
        lcd_puts("a100 b200"); //Print HELLO on LCD

while(1)
{
	a=puls0->in;
	if (a==1)
 318:	34 0f 00 01 	mvi r15,1
	a=puls0->in;	
 	lcd_init();
	lcd_cmd(0X80);      // Start Cursor From First Line
        lcd_puts("Cuanta cantidad?");  //Print HELLO on LCD
        lcd_cmd(0XC0);         // Start Cursor From Second Line
        lcd_puts("a100 b200"); //Print HELLO on LCD
 31c:	29 c3 00 00 	lw r3,(r14+0)

while(1)
{
	a=puls0->in;
 320:	28 61 00 00 	lw r1,(r3+0)
	if (a==1)
 324:	44 2d 00 05 	be r1,r13,338 <main+0x8c>
                blink0->out=0x00000002;
		sleep(1100);
		blink0->out=0x00000000;
	a=0;
	}
	if (a==2)
 328:	44 2c 00 14 	be r1,r12,378 <main+0xcc>
	a=puls0->in;	
 	lcd_init();
	lcd_cmd(0X80);      // Start Cursor From First Line
        lcd_puts("Cuanta cantidad?");  //Print HELLO on LCD
        lcd_cmd(0XC0);         // Start Cursor From Second Line
        lcd_puts("a100 b200"); //Print HELLO on LCD
 32c:	29 62 00 00 	lw r2,(r11+0)

while(1)
{
	a=puls0->in;
 330:	28 61 00 00 	lw r1,(r3+0)
	if (a==1)
 334:	5c 2d ff fd 	bne r1,r13,328 <main+0x7c>
	{
		blink0->out=0x00000001;
 338:	58 4d 00 14 	sw (r2+20),r13
		sleep(1100);
 33c:	34 01 04 4c 	mvi r1,1100
 340:	f8 00 00 1c 	calli 3b0 <sleep>
		blink0->out=0x00000000;
 344:	29 62 00 00 	lw r2,(r11+0)
                sleep(5000);
 348:	34 01 13 88 	mvi r1,5000
	a=puls0->in;
	if (a==1)
	{
		blink0->out=0x00000001;
		sleep(1100);
		blink0->out=0x00000000;
 34c:	58 40 00 14 	sw (r2+20),r0
                sleep(5000);
 350:	f8 00 00 18 	calli 3b0 <sleep>
                blink0->out=0x00000002;
 354:	29 62 00 00 	lw r2,(r11+0)
		sleep(1100);
 358:	34 01 04 4c 	mvi r1,1100
	{
		blink0->out=0x00000001;
		sleep(1100);
		blink0->out=0x00000000;
                sleep(5000);
                blink0->out=0x00000002;
 35c:	58 4c 00 14 	sw (r2+20),r12
		sleep(1100);
 360:	f8 00 00 14 	calli 3b0 <sleep>
		blink0->out=0x00000000;
 364:	29 61 00 00 	lw r1,(r11+0)
 368:	29 c3 00 00 	lw r3,(r14+0)
	a=puls0->in;	
 	lcd_init();
	lcd_cmd(0X80);      // Start Cursor From First Line
        lcd_puts("Cuanta cantidad?");  //Print HELLO on LCD
        lcd_cmd(0XC0);         // Start Cursor From Second Line
        lcd_puts("a100 b200"); //Print HELLO on LCD
 36c:	29 62 00 00 	lw r2,(r11+0)
		sleep(1100);
		blink0->out=0x00000000;
                sleep(5000);
                blink0->out=0x00000002;
		sleep(1100);
		blink0->out=0x00000000;
 370:	58 20 00 14 	sw (r1+20),r0
 374:	e3 ff ff ef 	bi 330 <main+0x84>
	a=0;
	}
	if (a==2)
	{
		blink0->out=0x00000001;
 378:	58 4f 00 14 	sw (r2+20),r15
		sleep(1100);
 37c:	34 01 04 4c 	mvi r1,1100
 380:	f8 00 00 0c 	calli 3b0 <sleep>
		blink0->out=0x00000000;
 384:	29 62 00 00 	lw r2,(r11+0)
                sleep(10000);
 388:	34 01 27 10 	mvi r1,10000
	}
	if (a==2)
	{
		blink0->out=0x00000001;
		sleep(1100);
		blink0->out=0x00000000;
 38c:	58 40 00 14 	sw (r2+20),r0
                sleep(10000);
 390:	f8 00 00 08 	calli 3b0 <sleep>
                blink0->out=0x00000002;
 394:	29 62 00 00 	lw r2,(r11+0)
		sleep(1100);
 398:	34 01 04 4c 	mvi r1,1100
	{
		blink0->out=0x00000001;
		sleep(1100);
		blink0->out=0x00000000;
                sleep(10000);
                blink0->out=0x00000002;
 39c:	58 4c 00 14 	sw (r2+20),r12
		sleep(1100);
 3a0:	f8 00 00 04 	calli 3b0 <sleep>
		blink0->out=0x00000000;
 3a4:	29 62 00 00 	lw r2,(r11+0)
 3a8:	58 40 00 14 	sw (r2+20),r0
 3ac:	e3 ff ff dc 	bi 31c <main+0x70>

000003b0 <sleep>:
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3b0:	78 02 00 00 	mvhi r2,0x0
 3b4:	38 42 04 ac 	ori r2,r2,0x4ac
 3b8:	38 03 c3 50 	mvu r3,0xc350
 3bc:	28 42 00 00 	lw r2,(r2+0)
 3c0:	88 23 08 00 	mul r1,r1,r3
 3c4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3c8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 3cc:	34 01 00 0a 	mvi r1,10
 3d0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3d4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3d8:	20 21 00 01 	andi r1,r1,0x1
 3dc:	44 20 ff fe 	be r1,r0,3d4 <sleep+0x24>
}
 3e0:	c3 a0 00 00 	ret

000003e4 <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
 3e4:	78 01 00 00 	mvhi r1,0x0
 3e8:	38 21 04 ac 	ori r1,r1,0x4ac
 3ec:	28 21 00 00 	lw r1,(r1+0)
 3f0:	38 02 c3 50 	mvu r2,0xc350
 3f4:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
 3f8:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3fc:	34 02 00 0e 	mvi r2,14
 400:	58 22 00 00 	sw (r1+0),r2
}
 404:	c3 a0 00 00 	ret

00000408 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 408:	c3 a0 00 00 	ret

0000040c <uart_getchar>:

char uart_getchar()
{   
 40c:	78 01 00 00 	mvhi r1,0x0
 410:	38 21 04 a8 	ori r1,r1,0x4a8
 414:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 418:	28 41 00 00 	lw r1,(r2+0)
 41c:	20 21 00 01 	andi r1,r1,0x1
 420:	44 20 ff fe 	be r1,r0,418 <uart_getchar+0xc>
	return uart0->rxtx;
 424:	28 41 00 04 	lw r1,(r2+4)
}
 428:	20 21 00 ff 	andi r1,r1,0xff
 42c:	c3 a0 00 00 	ret

00000430 <uart_putchar>:

void uart_putchar(char c)
{
 430:	78 02 00 00 	mvhi r2,0x0
 434:	38 42 04 a8 	ori r2,r2,0x4a8
 438:	28 43 00 00 	lw r3,(r2+0)
 43c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 440:	28 62 00 00 	lw r2,(r3+0)
 444:	20 42 00 10 	andi r2,r2,0x10
 448:	5c 40 ff fe 	bne r2,r0,440 <uart_putchar+0x10>
	uart0->rxtx = c;
 44c:	58 61 00 04 	sw (r3+4),r1
}
 450:	c3 a0 00 00 	ret

00000454 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 454:	40 24 00 00 	lbu r4,(r1+0)
 458:	44 80 00 0b 	be r4,r0,484 <uart_putstr+0x30>
 45c:	78 02 00 00 	mvhi r2,0x0
 460:	38 42 04 a8 	ori r2,r2,0x4a8
 464:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 468:	28 62 00 00 	lw r2,(r3+0)
 46c:	20 42 00 10 	andi r2,r2,0x10
 470:	5c 40 ff fe 	bne r2,r0,468 <uart_putstr+0x14>
	uart0->rxtx = c;
 474:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 478:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 47c:	40 24 00 00 	lbu r4,(r1+0)
 480:	5c 82 ff fa 	bne r4,r2,468 <uart_putstr+0x14>
 484:	c3 a0 00 00 	ret
