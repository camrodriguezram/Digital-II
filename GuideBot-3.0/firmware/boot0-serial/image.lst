
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000618  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000001bc  00860618  00860618  0000066c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  008607d4  008607d4  00000828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000028  008607e4  008607e4  00000838  2**2
                  ALLOC
  4 .debug_abbrev 0000033b  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000679  00000000  00000000  00000b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000598  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000192  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000013c  00000000  00000000  00001a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000008e  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000248  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 07 f0 	ori gp,gp,0x7f0
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 07 e4 	ori r1,r1,0x7e4
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 08 0c 	ori r3,r3,0x80c

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 0c 	calli 86008c <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <main>:
#include <string.h>
#include <stdlib.h>

inline void writeint(uint32_t val);

int main(int argc, char **argv){ ////Main Fuction
  86008c:	37 9c ff c0 	addi sp,sp,-64
  860090:	5b 8b 00 40 	sw (sp+64),r11
  860094:	5b 8c 00 3c 	sw (sp+60),r12
  860098:	5b 8d 00 38 	sw (sp+56),r13
  86009c:	5b 8e 00 34 	sw (sp+52),r14
  8600a0:	5b 8f 00 30 	sw (sp+48),r15
  8600a4:	5b 90 00 2c 	sw (sp+44),r16
  8600a8:	5b 91 00 28 	sw (sp+40),r17
  8600ac:	5b 92 00 24 	sw (sp+36),r18
  8600b0:	5b 93 00 20 	sw (sp+32),r19
  8600b4:	5b 94 00 1c 	sw (sp+28),r20
  8600b8:	5b 95 00 18 	sw (sp+24),r21
  8600bc:	5b 96 00 14 	sw (sp+20),r22
  8600c0:	5b 97 00 10 	sw (sp+16),r23
  8600c4:	5b 98 00 0c 	sw (sp+12),r24
  8600c8:	5b 99 00 08 	sw (sp+8),r25
  8600cc:	5b 9d 00 04 	sw (sp+4),ra
  8600d0:	78 0f 00 86 	mvhi r15,0x86
  8600d4:	78 0e 00 86 	mvhi r14,0x86
  8600d8:	78 0c 00 86 	mvhi r12,0x86
  8600dc:	78 0d 00 86 	mvhi r13,0x86
  8600e0:	78 11 00 86 	mvhi r17,0x86
  8600e4:	78 19 00 86 	mvhi r25,0x86
  8600e8:	78 18 00 86 	mvhi r24,0x86
  8600ec:	78 17 00 86 	mvhi r23,0x86
  8600f0:	78 16 00 86 	mvhi r22,0x86
  8600f4:	78 15 00 86 	mvhi r21,0x86
  8600f8:	78 14 00 86 	mvhi r20,0x86
  8600fc:	78 13 00 86 	mvhi r19,0x86
  860100:	78 12 00 86 	mvhi r18,0x86
	uint8_t c;
	uint8_t GPIO_INITIAL = 0;
	//uint8_t o1;
	//uint8_t o2;
	
	gpio_init();
  860104:	f8 00 00 f7 	calli 8604e0 <gpio_init>
  860108:	39 ef 06 18 	ori r15,r15,0x618
  86010c:	39 ce 06 24 	ori r14,r14,0x624
  860110:	39 8c 06 f8 	ori r12,r12,0x6f8
  860114:	39 ad 06 70 	ori r13,r13,0x670
  860118:	3a 31 06 fc 	ori r17,r17,0x6fc
  86011c:	3b 39 06 80 	ori r25,r25,0x680
  860120:	3b 18 06 8c 	ori r24,r24,0x68c
  860124:	3a f7 06 94 	ori r23,r23,0x694
  860128:	3a d6 06 a0 	ori r22,r22,0x6a0
  86012c:	3a b5 06 ac 	ori r21,r21,0x6ac
  860130:	3a 94 06 bc 	ori r20,r20,0x6bc
  860134:	3a 73 06 d0 	ori r19,r19,0x6d0
  860138:	3a 52 06 e4 	ori r18,r18,0x6e4
		uart_putstr("Letra Prueba: ");
		uart_putchar(c);
		uart_putstr("\r\n");
	
		
		switch (c) {
  86013c:	34 10 00 16 	mvi r16,22
	//uint8_t o2;
	
	gpio_init();
	
	for(;;){
	uart_putstr("Empezamos\r\n");
  860140:	b9 e0 08 00 	mv r1,r15
  860144:	f8 00 00 96 	calli 86039c <uart_putstr>
	uart_putstr(" Ingresa w para adelante, s para parar, d para derecha, a para izquierda\r\n");
  860148:	b9 c0 08 00 	mv r1,r14
  86014c:	f8 00 00 94 	calli 86039c <uart_putstr>
	
		c = uart_getchar();
  860150:	f8 00 00 81 	calli 860354 <uart_getchar>
  860154:	b8 20 58 00 	mv r11,r1
		uart_putstr("\r\n");
  860158:	b9 80 08 00 	mv r1,r12
  86015c:	f8 00 00 90 	calli 86039c <uart_putstr>
		uart_putstr("Letra Prueba: ");
  860160:	b9 a0 08 00 	mv r1,r13
  860164:	f8 00 00 8e 	calli 86039c <uart_putstr>
		uart_putchar(c);
  860168:	b9 60 08 00 	mv r1,r11
  86016c:	f8 00 00 83 	calli 860378 <uart_putchar>
		uart_putstr("\r\n");
	
		
		switch (c) {
  860170:	35 6b ff 9f 	addi r11,r11,-97
	
		c = uart_getchar();
		uart_putstr("\r\n");
		uart_putstr("Letra Prueba: ");
		uart_putchar(c);
		uart_putstr("\r\n");
  860174:	b9 80 08 00 	mv r1,r12
	
		
		switch (c) {
  860178:	21 6b 00 ff 	andi r11,r11,0xff
	
		c = uart_getchar();
		uart_putstr("\r\n");
		uart_putstr("Letra Prueba: ");
		uart_putchar(c);
		uart_putstr("\r\n");
  86017c:	f8 00 00 88 	calli 86039c <uart_putstr>
	
		
		switch (c) {
  860180:	55 70 00 3f 	bgu r11,r16,86027c <main+0x1f0>
  860184:	3d 6b 00 02 	sli r11,r11,2
  860188:	b6 2b 58 00 	add r11,r17,r11
  86018c:	29 62 00 00 	lw r2,(r11+0)
  860190:	c0 40 00 00 	b r2
		
		
		
    	case 'w':  //Suma
			uart_putstr("Adelante\r\n");
  860194:	bb 20 08 00 	mv r1,r25
  860198:	f8 00 00 81 	calli 86039c <uart_putstr>
  86019c:	34 0b 00 0a 	mvi r11,10
			int i=0;
			for(i==0; i<10;i++)
			{
				gpio_write(0x01); // (0000|0001)
  8601a0:	34 01 00 01 	mvi r1,1
  8601a4:	f8 00 00 c3 	calli 8604b0 <gpio_write>
				sleep(10);
  8601a8:	34 01 00 0a 	mvi r1,10
  8601ac:	f8 00 00 4f 	calli 8602e8 <sleep>
				gpio_write(0x04); // (0000|0100)
  8601b0:	34 01 00 04 	mvi r1,4
  8601b4:	f8 00 00 bf 	calli 8604b0 <gpio_write>
				sleep(10);
  8601b8:	35 6b ff ff 	addi r11,r11,-1
  8601bc:	34 01 00 0a 	mvi r1,10
  8601c0:	f8 00 00 4a 	calli 8602e8 <sleep>
		
		
    	case 'w':  //Suma
			uart_putstr("Adelante\r\n");
			int i=0;
			for(i==0; i<10;i++)
  8601c4:	5d 60 ff f7 	bne r11,r0,8601a0 <main+0x114>
		case 'd': // resta
			
			uart_putstr("Izquierda\r\n");
			gpio_write(0x04); // (0000|0100)
			sleep(200);          
    		gpio_write(GPIO_INITIAL);
  8601c8:	34 01 00 00 	mvi r1,0
  8601cc:	f8 00 00 b9 	calli 8604b0 <gpio_write>
			break;
  8601d0:	e3 ff ff dc 	bi 860140 <main+0xb4>
			gpio_write(GPIO_INITIAL);   			
    			
			break;
			
		case 's': // multi
			uart_putstr("Parar\r\n");
  8601d4:	bb 00 08 00 	mv r1,r24
  8601d8:	f8 00 00 71 	calli 86039c <uart_putstr>
			gpio_write(0x00); // (0000|0000)
  8601dc:	34 01 00 00 	mvi r1,0
  8601e0:	f8 00 00 b4 	calli 8604b0 <gpio_write>
			sleep(500);          
  8601e4:	34 01 01 f4 	mvi r1,500
  8601e8:	f8 00 00 40 	calli 8602e8 <sleep>
    		gpio_write(GPIO_INITIAL);
  8601ec:	34 01 00 00 	mvi r1,0
  8601f0:	f8 00 00 b0 	calli 8604b0 <gpio_write>
			break;
  8601f4:	e3 ff ff d3 	bi 860140 <main+0xb4>
			
				int f;
				f = 8/8;
				char h;
				h = (char)f;
				uart_putstr("\r\nresultado = ");
  8601f8:	ba a0 08 00 	mv r1,r21
  8601fc:	f8 00 00 68 	calli 86039c <uart_putstr>
				uart_putstr(h);
  860200:	34 01 00 01 	mvi r1,1
  860204:	f8 00 00 66 	calli 86039c <uart_putstr>
				uart_putstr("\r\n");
  860208:	b9 80 08 00 	mv r1,r12
  86020c:	f8 00 00 64 	calli 86039c <uart_putstr>
				const char *prueba;
				uart_putstr("\r\nprueba antes\r\n");
  860210:	ba 80 08 00 	mv r1,r20
  860214:	f8 00 00 62 	calli 86039c <uart_putstr>
				prueba = (char)uart_readString();
  860218:	f8 00 00 6e 	calli 8603d0 <uart_readString>
  86021c:	b8 20 58 00 	mv r11,r1
				uart_putstr("\r\nprueba despues\r\n");
  860220:	ba 60 08 00 	mv r1,r19
  860224:	f8 00 00 5e 	calli 86039c <uart_putstr>
				uart_putstr(prueba);
  860228:	21 61 00 ff 	andi r1,r11,0xff
  86022c:	f8 00 00 5c 	calli 86039c <uart_putstr>
				//uart_putstr("SPI STATUS\r\n");
				//uart_putstr((char *)spi_readStatus());
				//spi_init();
				//spi_test();
    			break;
  860230:	e3 ff ff c4 	bi 860140 <main+0xb4>
			
			break;  

		case 'd': // resta
			
			uart_putstr("Izquierda\r\n");
  860234:	ba c0 08 00 	mv r1,r22
  860238:	f8 00 00 59 	calli 86039c <uart_putstr>
			gpio_write(0x04); // (0000|0100)
  86023c:	34 01 00 04 	mvi r1,4
  860240:	f8 00 00 9c 	calli 8604b0 <gpio_write>
			sleep(200);          
  860244:	34 01 00 c8 	mvi r1,200
  860248:	f8 00 00 28 	calli 8602e8 <sleep>
    		gpio_write(GPIO_INITIAL);
  86024c:	34 01 00 00 	mvi r1,0
  860250:	f8 00 00 98 	calli 8604b0 <gpio_write>
  860254:	e3 ff ff bb 	bi 860140 <main+0xb4>
    		gpio_write(GPIO_INITIAL);
			break;
    			
    	case 'a': // div
			
			uart_putstr("Derecha\r\n");
  860258:	ba e0 08 00 	mv r1,r23
  86025c:	f8 00 00 50 	calli 86039c <uart_putstr>
			gpio_write(0x01); // (0000|0001)
  860260:	34 01 00 01 	mvi r1,1
  860264:	f8 00 00 93 	calli 8604b0 <gpio_write>
			sleep(200);          
  860268:	34 01 00 c8 	mvi r1,200
  86026c:	f8 00 00 1f 	calli 8602e8 <sleep>
    		gpio_write(GPIO_INITIAL);
  860270:	34 01 00 00 	mvi r1,0
  860274:	f8 00 00 8f 	calli 8604b0 <gpio_write>
			
			break;  
  860278:	e3 ff ff b2 	bi 860140 <main+0xb4>
				//spi_init();
				//spi_test();
    			break;

		default:
			uart_putstr("Vuelve a intentarlo \r\n");
  86027c:	ba 40 08 00 	mv r1,r18
  860280:	f8 00 00 47 	calli 86039c <uart_putstr>
  860284:	e3 ff ff af 	bi 860140 <main+0xb4>

00860288 <writeint>:
	
	return 0;
}

inline void writeint(uint32_t val)
{
  860288:	37 9c ff f0 	addi sp,sp,-16
  86028c:	5b 8b 00 10 	sw (sp+16),r11
  860290:	5b 8c 00 0c 	sw (sp+12),r12
  860294:	5b 8d 00 08 	sw (sp+8),r13
  860298:	5b 9d 00 04 	sw (sp+4),ra
  86029c:	34 0b 00 08 	mvi r11,8
  8602a0:	b8 20 60 00 	mv r12,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) 
	{
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) uart_putchar('A'+digit-10);
  8602a4:	34 0d 00 09 	mvi r13,9
  8602a8:	e0 00 00 02 	bi 8602b0 <writeint+0x28>
		else uart_putchar('0'+digit);
		val <<= 4;
  8602ac:	3d 8c 00 04 	sli r12,r12,4
{
	uint32_t i, digit;

	for (i=0; i<8; i++) 
	{
		digit = (val & 0xf0000000) >> 28;
  8602b0:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) uart_putchar('A'+digit-10);
  8602b4:	34 41 00 37 	addi r1,r2,55
  8602b8:	51 a2 00 0a 	bgeu r13,r2,8602e0 <writeint+0x58>
		else uart_putchar('0'+digit);
  8602bc:	35 6b ff ff 	addi r11,r11,-1
  8602c0:	f8 00 00 2e 	calli 860378 <uart_putchar>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) 
  8602c4:	5d 60 ff fa 	bne r11,r0,8602ac <writeint+0x24>
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) uart_putchar('A'+digit-10);
		else uart_putchar('0'+digit);
		val <<= 4;
	}
}
  8602c8:	2b 9d 00 04 	lw ra,(sp+4)
  8602cc:	2b 8b 00 10 	lw r11,(sp+16)
  8602d0:	2b 8c 00 0c 	lw r12,(sp+12)
  8602d4:	2b 8d 00 08 	lw r13,(sp+8)
  8602d8:	37 9c 00 10 	addi sp,sp,16
  8602dc:	c3 a0 00 00 	ret

	for (i=0; i<8; i++) 
	{
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) uart_putchar('A'+digit-10);
		else uart_putchar('0'+digit);
  8602e0:	34 41 00 30 	addi r1,r2,48
  8602e4:	e3 ff ff f6 	bi 8602bc <writeint+0x34>

008602e8 <sleep>:
 */
void sleep(int msec){
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  8602e8:	78 04 00 86 	mvhi r4,0x86
  8602ec:	38 84 07 58 	ori r4,r4,0x758
  8602f0:	28 83 00 00 	lw r3,(r4+0)
  8602f4:	78 02 00 86 	mvhi r2,0x86
  8602f8:	38 42 07 d8 	ori r2,r2,0x7d8
  8602fc:	28 42 00 00 	lw r2,(r2+0)
  860300:	88 23 08 00 	mul r1,r1,r3
  860304:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860308:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
  86030c:	34 01 00 0a 	mvi r1,10
  860310:	58 41 00 0c 	sw (r2+12),r1
	//uart_putstr("Hola, estoy en el timer");
	//uart_putstr(compare1);
	do {
		//halt();
 		tcr = timer0->tcr1;
  860314:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860318:	20 21 00 01 	andi r1,r1,0x1
  86031c:	44 20 ff fe 	be r1,r0,860314 <sleep+0x2c>
}
  860320:	c3 a0 00 00 	ret

00860324 <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
  860324:	78 01 00 86 	mvhi r1,0x86
  860328:	78 03 00 86 	mvhi r3,0x86
  86032c:	38 21 07 d8 	ori r1,r1,0x7d8
  860330:	38 63 07 58 	ori r3,r3,0x758
  860334:	28 21 00 00 	lw r1,(r1+0)
  860338:	28 62 00 00 	lw r2,(r3+0)
  86033c:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
  860340:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
  860344:	34 02 00 0e 	mvi r2,14
  860348:	58 22 00 00 	sw (r1+0),r2
}
  86034c:	c3 a0 00 00 	ret

00860350 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  860350:	c3 a0 00 00 	ret

00860354 <uart_getchar>:

char uart_getchar(){   
  860354:	78 01 00 86 	mvhi r1,0x86
  860358:	38 21 07 d4 	ori r1,r1,0x7d4
  86035c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860360:	28 41 00 00 	lw r1,(r2+0)
  860364:	20 21 00 01 	andi r1,r1,0x1
  860368:	44 20 ff fe 	be r1,r0,860360 <uart_getchar+0xc>
	return uart0->rxtx;
  86036c:	28 41 00 04 	lw r1,(r2+4)
}
  860370:	20 21 00 ff 	andi r1,r1,0xff
  860374:	c3 a0 00 00 	ret

00860378 <uart_putchar>:
	uart_putstr((char)temp);
	return temp;
}


void uart_putchar(char c){
  860378:	78 02 00 86 	mvhi r2,0x86
  86037c:	38 42 07 d4 	ori r2,r2,0x7d4
  860380:	28 43 00 00 	lw r3,(r2+0)
  860384:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  860388:	28 62 00 00 	lw r2,(r3+0)
  86038c:	20 42 00 10 	andi r2,r2,0x10
  860390:	5c 40 ff fe 	bne r2,r0,860388 <uart_putchar+0x10>
	uart0->rxtx = c;
  860394:	58 61 00 04 	sw (r3+4),r1
}
  860398:	c3 a0 00 00 	ret

0086039c <uart_putstr>:

void uart_putstr(char *str){
	char *c = str;
	while(*c) {
  86039c:	40 24 00 00 	lbu r4,(r1+0)
  8603a0:	44 80 00 0b 	be r4,r0,8603cc <uart_putstr+0x30>
  8603a4:	78 02 00 86 	mvhi r2,0x86
  8603a8:	38 42 07 d4 	ori r2,r2,0x7d4
  8603ac:	28 43 00 00 	lw r3,(r2+0)
	return temp;
}


void uart_putchar(char c){
	while (uart0->ucr & UART_BUSY) ;
  8603b0:	28 62 00 00 	lw r2,(r3+0)
  8603b4:	20 42 00 10 	andi r2,r2,0x10
  8603b8:	5c 40 ff fe 	bne r2,r0,8603b0 <uart_putstr+0x14>
	uart0->rxtx = c;
  8603bc:	58 64 00 04 	sw (r3+4),r4

void uart_putstr(char *str){
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  8603c0:	34 21 00 01 	addi r1,r1,1
	uart0->rxtx = c;
}

void uart_putstr(char *str){
	char *c = str;
	while(*c) {
  8603c4:	40 24 00 00 	lbu r4,(r1+0)
  8603c8:	5c 82 ff fa 	bne r4,r2,8603b0 <uart_putstr+0x14>
  8603cc:	c3 a0 00 00 	ret

008603d0 <uart_readString>:
char uart_getchar(){   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
}

const char* uart_readString(void){
  8603d0:	37 9c ff e8 	addi sp,sp,-24
  8603d4:	5b 8b 00 18 	sw (sp+24),r11
  8603d8:	5b 8c 00 14 	sw (sp+20),r12
  8603dc:	5b 8d 00 10 	sw (sp+16),r13
  8603e0:	5b 8e 00 0c 	sw (sp+12),r14
  8603e4:	5b 8f 00 08 	sw (sp+8),r15
  8603e8:	5b 9d 00 04 	sw (sp+4),ra
	static char rxstr[RX_BUFF];
	//uint8_t rxstr[RX_BUFF];
	static char* temp;
	temp = rxstr;
  8603ec:	78 02 00 86 	mvhi r2,0x86
  8603f0:	78 0c 00 86 	mvhi r12,0x86
  8603f4:	38 42 07 e8 	ori r2,r2,0x7e8
  8603f8:	39 8c 07 ec 	ori r12,r12,0x7ec
 uart_putstr("\r\nprueba durante\r\n");
  8603fc:	78 01 00 86 	mvhi r1,0x86
  860400:	38 21 07 60 	ori r1,r1,0x760
  860404:	78 0d 00 86 	mvhi r13,0x86
 int i;
 i=0;
	while((temp[i]= uart_getchar()) != ';')
	{
		uart_putstr("\r\nentre al while\r\n");
  860408:	78 0e 00 86 	mvhi r14,0x86

const char* uart_readString(void){
	static char rxstr[RX_BUFF];
	//uint8_t rxstr[RX_BUFF];
	static char* temp;
	temp = rxstr;
  86040c:	58 4c 00 00 	sw (r2+0),r12
 uart_putstr("\r\nprueba durante\r\n");
  860410:	b9 80 58 00 	mv r11,r12
  860414:	fb ff ff e2 	calli 86039c <uart_putstr>
  860418:	39 ad 07 d4 	ori r13,r13,0x7d4
 int i;
 i=0;
	while((temp[i]= uart_getchar()) != ';')
  86041c:	34 0f 00 3b 	mvi r15,59
	{
		uart_putstr("\r\nentre al while\r\n");
  860420:	39 ce 07 74 	ori r14,r14,0x774
		temp[i] = rxstr;
		++i;
		uart_putstr(temp[i]); // Prueba
  860424:	29 a3 00 00 	lw r3,(r13+0)
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar(){   
	while (! (uart0->ucr & UART_DR)) ;
  860428:	28 62 00 00 	lw r2,(r3+0)
  86042c:	20 42 00 01 	andi r2,r2,0x1
  860430:	44 40 ff fe 	be r2,r0,860428 <uart_readString+0x58>
	return uart0->rxtx;
  860434:	28 62 00 04 	lw r2,(r3+4)
  860438:	20 42 00 ff 	andi r2,r2,0xff
	static char* temp;
	temp = rxstr;
 uart_putstr("\r\nprueba durante\r\n");
 int i;
 i=0;
	while((temp[i]= uart_getchar()) != ';')
  86043c:	31 62 00 00 	sb (r11+0),r2
  860440:	35 6b 00 01 	addi r11,r11,1
  860444:	44 4f 00 07 	be r2,r15,860460 <uart_readString+0x90>
	{
		uart_putstr("\r\nentre al while\r\n");
  860448:	b9 c0 08 00 	mv r1,r14
  86044c:	fb ff ff d4 	calli 86039c <uart_putstr>
		temp[i] = rxstr;
		++i;
		uart_putstr(temp[i]); // Prueba
  860450:	41 61 00 00 	lbu r1,(r11+0)
 int i;
 i=0;
	while((temp[i]= uart_getchar()) != ';')
	{
		uart_putstr("\r\nentre al while\r\n");
		temp[i] = rxstr;
  860454:	31 6c ff ff 	sb (r11+-1),r12
		++i;
		uart_putstr(temp[i]); // Prueba
  860458:	fb ff ff d1 	calli 86039c <uart_putstr>
  86045c:	e3 ff ff f2 	bi 860424 <uart_readString+0x54>
	}
	uart_putstr("\r\n me sali del while\r\n");
  860460:	78 01 00 86 	mvhi r1,0x86
  860464:	38 21 07 88 	ori r1,r1,0x788
  860468:	fb ff ff cd 	calli 86039c <uart_putstr>
	uart_putstr((char)temp);
  86046c:	21 81 00 ff 	andi r1,r12,0xff
  860470:	fb ff ff cb 	calli 86039c <uart_putstr>
	return temp;
}
  860474:	b9 80 08 00 	mv r1,r12
  860478:	2b 9d 00 04 	lw ra,(sp+4)
  86047c:	2b 8b 00 18 	lw r11,(sp+24)
  860480:	2b 8c 00 14 	lw r12,(sp+20)
  860484:	2b 8d 00 10 	lw r13,(sp+16)
  860488:	2b 8e 00 0c 	lw r14,(sp+12)
  86048c:	2b 8f 00 08 	lw r15,(sp+8)
  860490:	37 9c 00 18 	addi sp,sp,24
  860494:	c3 a0 00 00 	ret

00860498 <gpio_read>:
 * GPIO Functions
 */
 
uint8_t gpio_read(){ // Read a 8 bit "order" from the outside

	return (uint8_t)gpio0->read; //Para el proyecto no sirve... jaja
  860498:	78 01 00 86 	mvhi r1,0x86
  86049c:	38 21 07 dc 	ori r1,r1,0x7dc
  8604a0:	28 21 00 00 	lw r1,(r1+0)
  8604a4:	28 21 00 00 	lw r1,(r1+0)
	
}
  8604a8:	20 21 00 ff 	andi r1,r1,0xff
  8604ac:	c3 a0 00 00 	ret

008604b0 <gpio_write>:
void gpio_write(uint8_t dataout){// , uint8_t whichdir){ // Write a 8 bit order to the outside 
	gpio0->write = (uint32_t)dataout; //Le mando la información a dichos pines
  8604b0:	78 02 00 86 	mvhi r2,0x86
  8604b4:	38 42 07 dc 	ori r2,r2,0x7dc
  8604b8:	28 42 00 00 	lw r2,(r2+0)
uint8_t gpio_read(){ // Read a 8 bit "order" from the outside

	return (uint8_t)gpio0->read; //Para el proyecto no sirve... jaja
	
}
void gpio_write(uint8_t dataout){// , uint8_t whichdir){ // Write a 8 bit order to the outside 
  8604bc:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->write = (uint32_t)dataout; //Le mando la información a dichos pines
  8604c0:	58 41 00 04 	sw (r2+4),r1

}
  8604c4:	c3 a0 00 00 	ret

008604c8 <gpio_wdir>:
void gpio_wdir(uint8_t dirout){

	gpio0->w_dir = (uint32_t)dirout; // Desconecto los pines w_dir[i] = 0
  8604c8:	78 02 00 86 	mvhi r2,0x86
  8604cc:	38 42 07 dc 	ori r2,r2,0x7dc
  8604d0:	28 42 00 00 	lw r2,(r2+0)
}
void gpio_write(uint8_t dataout){// , uint8_t whichdir){ // Write a 8 bit order to the outside 
	gpio0->write = (uint32_t)dataout; //Le mando la información a dichos pines

}
void gpio_wdir(uint8_t dirout){
  8604d4:	20 21 00 ff 	andi r1,r1,0xff

	gpio0->w_dir = (uint32_t)dirout; // Desconecto los pines w_dir[i] = 0
  8604d8:	58 41 00 08 	sw (r2+8),r1

}
  8604dc:	c3 a0 00 00 	ret

008604e0 <gpio_init>:

void gpio_init(){
  8604e0:	37 9c ff f8 	addi sp,sp,-8
  8604e4:	5b 8b 00 08 	sw (sp+8),r11
  8604e8:	5b 9d 00 04 	sw (sp+4),ra
	
		uint8_t initial = 0x00;
		uint8_t defaults = 0xff;
		
		gpio0->w_dir = initial;
  8604ec:	78 0b 00 86 	mvhi r11,0x86
  8604f0:	39 6b 07 dc 	ori r11,r11,0x7dc
  8604f4:	29 62 00 00 	lw r2,(r11+0)
		gpio0->read = initial;
		gpio0->write = initial;

		sleep(10);
  8604f8:	34 01 00 0a 	mvi r1,10
void gpio_init(){
	
		uint8_t initial = 0x00;
		uint8_t defaults = 0xff;
		
		gpio0->w_dir = initial;
  8604fc:	58 40 00 08 	sw (r2+8),r0
		gpio0->read = initial;
  860500:	58 40 00 00 	sw (r2+0),r0
		gpio0->write = initial;
  860504:	58 40 00 04 	sw (r2+4),r0

		sleep(10);
  860508:	fb ff ff 78 	calli 8602e8 <sleep>

		gpio0->w_dir = defaults;
  86050c:	29 63 00 00 	lw r3,(r11+0)
  860510:	34 02 00 ff 	mvi r2,255
		gpio0->write  = defaults;

		sleep(100);
  860514:	34 01 00 64 	mvi r1,100
		gpio0->read = initial;
		gpio0->write = initial;

		sleep(10);

		gpio0->w_dir = defaults;
  860518:	58 62 00 08 	sw (r3+8),r2
		gpio0->write  = defaults;
  86051c:	58 62 00 04 	sw (r3+4),r2

		sleep(100);
  860520:	fb ff ff 72 	calli 8602e8 <sleep>
		gpio0->write  = initial;
  860524:	29 61 00 00 	lw r1,(r11+0)
  860528:	58 20 00 04 	sw (r1+4),r0

	}
  86052c:	2b 9d 00 04 	lw ra,(sp+4)
  860530:	2b 8b 00 08 	lw r11,(sp+8)
  860534:	37 9c 00 08 	addi sp,sp,8
  860538:	c3 a0 00 00 	ret

0086053c <spi_init>:
 
 /***************************************************************************
 * SPI Functions
 *//**************************************************************************/

void spi_init(void){
  86053c:	37 9c ff f8 	addi sp,sp,-8
  860540:	5b 8b 00 08 	sw (sp+8),r11
  860544:	5b 9d 00 04 	sw (sp+4),ra
	
	int32_t init = 0xff;
	int32_t def = 0x00;

	spi0->rxr = init;
  860548:	78 0b 00 86 	mvhi r11,0x86
  86054c:	39 6b 07 e0 	ori r11,r11,0x7e0
  860550:	29 63 00 00 	lw r3,(r11+0)
  860554:	34 02 00 ff 	mvi r2,255
    spi0->txr = init;
    spi0->sr = init;
    spi0->cr = init;
    spi0->ssr = init;
    sleep(100);
  860558:	34 01 00 64 	mvi r1,100
void spi_init(void){
	
	int32_t init = 0xff;
	int32_t def = 0x00;

	spi0->rxr = init;
  86055c:	58 62 00 00 	sw (r3+0),r2
    spi0->txr = init;
  860560:	58 62 00 04 	sw (r3+4),r2
    spi0->sr = init;
  860564:	58 62 00 08 	sw (r3+8),r2
    spi0->cr = init;
  860568:	58 62 00 0c 	sw (r3+12),r2
    spi0->ssr = init;
  86056c:	58 62 00 10 	sw (r3+16),r2
    sleep(100);
  860570:	fb ff ff 5e 	calli 8602e8 <sleep>
    spi0->rxr = def;
  860574:	29 61 00 00 	lw r1,(r11+0)
    spi0->txr = def;
    spi0->cr = 0x01;
  860578:	34 02 00 01 	mvi r2,1
    spi0->txr = init;
    spi0->sr = init;
    spi0->cr = init;
    spi0->ssr = init;
    sleep(100);
    spi0->rxr = def;
  86057c:	58 20 00 00 	sw (r1+0),r0
    spi0->txr = def;
  860580:	58 20 00 04 	sw (r1+4),r0
    spi0->cr = 0x01;
  860584:	58 22 00 0c 	sw (r1+12),r2
	}
  860588:	2b 9d 00 04 	lw ra,(sp+4)
  86058c:	2b 8b 00 08 	lw r11,(sp+8)
  860590:	37 9c 00 08 	addi sp,sp,8
  860594:	c3 a0 00 00 	ret

00860598 <spi_test>:

void spi_test(void)
{
  860598:	37 9c ff f8 	addi sp,sp,-8
  86059c:	5b 8b 00 08 	sw (sp+8),r11
  8605a0:	5b 9d 00 04 	sw (sp+4),ra
	sleep(1000);
	spi0->txr = init;
	if(!(uart0->ucr & UART_DR)) break;
	}
	*/
	uart_putstr("Prueba del SPI \n");
  8605a4:	78 01 00 86 	mvhi r1,0x86
  8605a8:	38 21 07 a0 	ori r1,r1,0x7a0
  8605ac:	fb ff ff 7c 	calli 86039c <uart_putstr>
	//int i;
	int32_t aux_read, aux_write;
	
	spi0->ssr=0;
  8605b0:	78 01 00 86 	mvhi r1,0x86
  8605b4:	38 21 07 e0 	ori r1,r1,0x7e0
	spi0->txr = 0x000AffAB; // Probado en el osciloscopio
  8605b8:	78 03 00 86 	mvhi r3,0x86
	*/
	uart_putstr("Prueba del SPI \n");
	//int i;
	int32_t aux_read, aux_write;
	
	spi0->ssr=0;
  8605bc:	28 22 00 00 	lw r2,(r1+0)
	spi0->txr = 0x000AffAB; // Probado en el osciloscopio
  8605c0:	38 63 07 5c 	ori r3,r3,0x75c
  8605c4:	28 61 00 00 	lw r1,(r3+0)
	*/
	uart_putstr("Prueba del SPI \n");
	//int i;
	int32_t aux_read, aux_write;
	
	spi0->ssr=0;
  8605c8:	58 40 00 10 	sw (r2+16),r0
	spi0->txr = 0x000AffAB; // Probado en el osciloscopio
  8605cc:	58 41 00 04 	sw (r2+4),r1
	//for(i = 0;i<30;i++){	
	aux_read = spi0->rxr;
  8605d0:	28 41 00 00 	lw r1,(r2+0)
	aux_write = spi0->txr;
  8605d4:	28 4b 00 04 	lw r11,(r2+4)
	writeint(aux_read);
  8605d8:	fb ff ff 2c 	calli 860288 <writeint>
	writeint(aux_write);
  8605dc:	b9 60 08 00 	mv r1,r11
  8605e0:	fb ff ff 2a 	calli 860288 <writeint>
	uart_putstr("\n Fin de la prueba del SPI \n");
  8605e4:	78 01 00 86 	mvhi r1,0x86
  8605e8:	38 21 07 b4 	ori r1,r1,0x7b4
  8605ec:	fb ff ff 6c 	calli 86039c <uart_putstr>
	//}
}
  8605f0:	2b 9d 00 04 	lw ra,(sp+4)
  8605f4:	2b 8b 00 08 	lw r11,(sp+8)
  8605f8:	37 9c 00 08 	addi sp,sp,8
  8605fc:	c3 a0 00 00 	ret

00860600 <spi_readStatus>:

uint8_t spi_readStatus(void){

	return spi0-> sr;
  860600:	78 01 00 86 	mvhi r1,0x86
  860604:	38 21 07 e0 	ori r1,r1,0x7e0
  860608:	28 21 00 00 	lw r1,(r1+0)
  86060c:	28 21 00 08 	lw r1,(r1+8)

	}
  860610:	20 21 00 ff 	andi r1,r1,0xff
  860614:	c3 a0 00 00 	ret
